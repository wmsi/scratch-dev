'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

exports.default = function () {
  function getModuleSourceName(opts) {
    return opts.moduleSourceName || './intl';
  }

  function getMessageDescriptorKey(path) {
    if (path.isIdentifier()) {
      return path.node.name;
    }

    var evaluated = path.evaluate();
    if (evaluated.confident) {
      return evaluated.value;
    }

    throw path.buildCodeFrameError('[intl] Messages must be statically evaluate-able for extraction');
  }

  function getMessageDescriptorValue(path) {
    var evaluated = path.evaluate();
    if (evaluated.confident) {
      return evaluated.value;
    }

    throw path.buildCodeFrameError('[intl] Messages must be statically evaluate-able for extraction');
  }

  function createMessageDescriptor(propPaths) {
    return propPaths.reduce(function (hash, _ref) {
      var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

      var keyPath = _ref2[0];
      var valuePath = _ref2[1];

      var key = getMessageDescriptorKey(keyPath);

      if (!DESCRIPTOR_PROPS.has(key)) {
        return hash;
      }

      var value = getMessageDescriptorValue(valuePath).trim();

      if (key === 'defaultMessage') {
        try {
          hash[key] = (0, _printIcuMessage2.default)(value);
        } catch (parseError) {
          throw valuePath.buildCodeFrameError('[intl] Message failed to parse. ' + 'See: http://formatjs.io/guides/message-syntax/', parseError);
        }
      } else {
        hash[key] = value;
      }

      return hash;
    }, {});
  }

  function storeMessage(_ref3, path, state) {
    var id = _ref3.id;
    var description = _ref3.description;
    var defaultMessage = _ref3.defaultMessage;
    var opts = state.opts;
    var intl = state.intl;


    if (!(id && defaultMessage)) {
      throw path.buildCodeFrameError('[intl] Message Descriptors require an `id` and `defaultMessage`');
    }

    if (intl.messages.has(id)) {
      var existing = intl.messages.get(id);

      if (description !== existing.description || defaultMessage !== existing.defaultMessage) {
        throw path.buildCodeFrameError('[intl] Duplicate message id: "' + id + '", ' + 'but the `description` and/or `defaultMessage` are different');
      }
    }

    if (opts.enforceDescriptions && !description) {
      throw path.buildCodeFrameError('[intl] Message must have a `description`');
    }

    intl.messages.set(id, { id: id, description: description, defaultMessage: defaultMessage });
  }

  function referencesImport(path, mod, importedNames) {
    if (!path.isIdentifier()) {
      return false;
    }

    return importedNames.some(function (name) {
      return path.referencesImport(mod, name);
    });
  }

  return {
    visitor: {
      Program: {
        enter: function enter(path, state) {
          state.intl = {
            messages: new _map2.default()
          };
        },
        exit: function exit(path, state) {
          var file = state.file;
          var opts = state.opts;
          var intl = state.intl;
          var _file$opts = file.opts;
          var basename = _file$opts.basename;
          var filename = _file$opts.filename;


          var descriptors = [].concat((0, _toConsumableArray3.default)(intl.messages.values()));
          file.metadata['intl'] = { messages: descriptors };

          if (opts.messagesDir && descriptors.length > 0) {
            // Make sure the relative path is "absolute" before
            // joining it with the `messagesDir`.
            var relativePath = p.join(p.sep, p.relative(process.cwd(), filename));

            var messagesFilename = p.join(opts.messagesDir, p.dirname(relativePath), basename + '.json');

            var messagesFile = (0, _stringify2.default)(descriptors, null, 2);

            (0, _mkdirp.sync)(p.dirname(messagesFilename));
            (0, _fs.writeFileSync)(messagesFilename, messagesFile + '\n');
          }
        }
      },

      CallExpression: function CallExpression(path, state) {
        var moduleSourceName = getModuleSourceName(state.opts);
        var callee = path.get('callee');

        if (referencesImport(callee, moduleSourceName, FUNCTION_NAMES)) {
          var messageObj = path.get('arguments')[0];

          if (!(messageObj && messageObj.isObjectExpression())) {
            throw path.buildCodeFrameError('[intl] `' + callee.node.name + '()` must be ' + 'called with an object expression');
          }

          var properties = messageObj.get('properties');

          var descriptor = createMessageDescriptor(properties.map(function (prop) {
            return [prop.get('key'), prop.get('value')];
          }));

          if (!descriptor.defaultMessage) {
            throw path.buildCodeFrameError('[intl] Message is missing a `defaultMessage`');
          }

          storeMessage(descriptor, path, state);
        }
      }
    }
  };
};

var _path = require('path');

var p = _interopRequireWildcard(_path);

var _fs = require('fs');

var _mkdirp = require('mkdirp');

var _printIcuMessage = require('./print-icu-message');

var _printIcuMessage2 = _interopRequireDefault(_printIcuMessage);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
* Copyright 2016, Yahoo Inc. and James G. Kim
* Copyrights licensed under the New BSD License.
* See the accompanying LICENSE file for terms.
*/

var FUNCTION_NAMES = ['default'];

var DESCRIPTOR_PROPS = new _set2.default(['id', 'description', 'defaultMessage']);