{
  "_args": [
    [
      "github:rschamp/gh-pages#publish-branch-to-subfolder",
      "/home/marc/Documentos/WMSI/scratch/scratch-gui"
    ]
  ],
  "_from": "rschamp/gh-pages#publish-branch-to-subfolder",
  "_id": "gh-pages@0.12.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/gh-pages",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/rschamp/gh-pages/publish-branch-to-subfolder/package.json",
      "gitUrl": "git://github.com/rschamp/gh-pages.git#publish-branch-to-subfolder",
      "httpsUrl": "git+https://github.com/rschamp/gh-pages.git#publish-branch-to-subfolder",
      "shortcut": "github:rschamp/gh-pages#publish-branch-to-subfolder",
      "ssh": "git@github.com:rschamp/gh-pages.git#publish-branch-to-subfolder",
      "sshUrl": "git+ssh://git@github.com/rschamp/gh-pages.git#publish-branch-to-subfolder",
      "type": "github"
    },
    "name": null,
    "raw": "github:rschamp/gh-pages#publish-branch-to-subfolder",
    "rawSpec": "github:rschamp/gh-pages#publish-branch-to-subfolder",
    "scope": null,
    "spec": "github:rschamp/gh-pages#publish-branch-to-subfolder",
    "type": "hosted"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/rschamp/gh-pages.git#47e5e5c376ca65f4b407325e115174172d9c12ae",
  "_shasum": "39390d162797769485572ab00a8c44dbea4ae781",
  "_shrinkwrap": null,
  "_spec": "github:rschamp/gh-pages#publish-branch-to-subfolder",
  "_where": "/home/marc/Documentos/WMSI/scratch/scratch-gui",
  "author": {
    "name": "Tim Schaub",
    "url": "http://tschaub.net/"
  },
  "bin": {
    "gh-pages": "bin/gh-pages"
  },
  "bugs": {
    "url": "https://github.com/tschaub/gh-pages/issues"
  },
  "dependencies": {
    "async": "2.1.2",
    "commander": "2.9.0",
    "globby": "^6.1.0",
    "graceful-fs": "4.1.10",
    "q": "1.4.1",
    "q-io": "1.13.2",
    "rimraf": "^2.5.4"
  },
  "description": "Publish to a gh-pages branch on GitHub (or any other branch on any other remote)",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^3.10.2",
    "eslint-config-tschaub": "^6.0.0",
    "mocha": "^3.1.2"
  },
  "eslintConfig": {
    "extends": "tschaub"
  },
  "gitHead": "47e5e5c376ca65f4b407325e115174172d9c12ae",
  "homepage": "https://github.com/tschaub/gh-pages",
  "keywords": [
    "gh-pages",
    "git",
    "github"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "gh-pages",
  "optionalDependencies": {},
  "readme": "# gh-pages\n\nPublish files to a `gh-pages` branch on GitHub (or any other branch anywhere else).\n\n## Getting Started\n\n```shell\nnpm install gh-pages --save-dev\n```\n\nThis module requires Git `>=1.7.6`.\n\n## Basic Usage\n\n```js\nvar ghpages = require('gh-pages');\nvar path = require('path');\n\nghpages.publish(path.join(__dirname, 'dist'), function(err) { ... });\n```\n\n\n## `publish`\n\n```js\nghpages.publish(basePath, callback);\n// or...\nghpages.publish(basePath, options, callback);\n```\n\nCalling this function will create a temporary clone of the current repository, create a `gh-pages` branch if one doesn't already exist, copy over all files from the base path, or only those that match patterns from the optional `src` configuration, commit all changes, and push to the `origin` remote.\n\nIf a `gh-pages` branch already exists, it will be updated with all commits from the remote before adding any commits from the provided `src` files.\n\n**Note** that any files in the `gh-pages` branch that are *not* in the `src` files **will be removed**.  See the [`add` option](#optionsadd) if you don't want any of the existing files removed.\n\n\n### <a id=\"basepath\">`basePath`</a>\n* type: `string`\n\nThe base directory for all source files (those listed in the `src` config property).\n\nExample use of the `basePath`:\n\n```js\n/**\n * Given the following directory structure:\n *\n *   build/\n *     index.html\n *     js/\n *       site.js\n *\n * The usage below will create a `gh-pages` branch that looks like this:\n *\n *   index.html\n *   js/\n *     site.js\n *\n */\nghpages.publish(path.join(__dirname, 'build'), callback);\n```\n\n\n### Options\n\nThe default options work for simple cases.  The options described below let you push to alternate branches, customize your commit messages, and more.\n\n\n#### <a id=\"optionssrc\">options.src</a>\n * type: `string|Array<string>`\n * default: `'**/*'`\n\nThe [minimatch](https://github.com/isaacs/minimatch) pattern or array of patterns used to select which files should be published.\n\n\n#### <a id=\"optionsdotfiles\">options.dotfiles</a>\n * type: `boolean`\n * default: `false`\n\nInclude dotfiles.  By default, files starting with `.` are ignored unless they are explicitly provided in the `src` array.  If you want to also include dotfiles that otherwise match your `src` patterns, set `dotfiles: true` in your options.\n\nExample use of the `dotfiles` option:\n\n```js\n/**\n * The usage below will push dotfiles (directories and files)\n * that otherwise match the `src` pattern.\n */\nghpages.publish(path.join(__dirname, 'dist'), { dotfiles: true }, callback);\n```\n\n\n#### <a id=\"optionsadd\">options.add</a>\n * type: `boolean`\n * default: `false`\n\nOnly add, and never remove existing files.  By default, existing files in the target branch are removed before adding the ones from your `src` config.  If you want the task to add new `src` files but leave existing ones untouched, set `add: true` in your options.\n\nExample use of the `add` option:\n\n```js\n/**\n * The usage below will only add files to the `gh-pages` branch, never removing\n * any existing files (even if they don't exist in the `src` config).\n */\nghpages.publish(path.join(__dirname, 'build'), { add: true }, callback);\n```\n\n\n#### <a id=\"optionsrepo\">options.repo</a>\n * type: `string`\n * default: url for the origin remote of the current dir (assumes a git repository)\n\nBy default, `gh-pages` assumes that the current working directory is a git repository, and that you want to push changes to the `origin` remote.\n\nIf instead your script is not in a git repository, or if you want to push to another repository, you can provide the repository URL in the `repo` option.\n\nExample use of the `repo` option:\n\n```js\n/**\n * If the current directory is not a clone of the repository you want to work\n * with, set the URL for the repository in the `repo` option.  This usage will\n * push all files in the `src` config to the `gh-pages` branch of the `repo`.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  repo: 'https://example.com/other/repo.git'\n}, callback);\n```\n\n\n#### <a id=\"optionsbranch\">options.branch</a>\n * type: `string`\n * default: `'gh-pages'`\n\nThe name of the branch you'll be pushing to.  The default uses GitHub's `gh-pages` branch, but this can be configured to push to any branch on any remote.\n\nExample use of the `branch` option:\n\n```js\n/**\n * This task pushes to the `master` branch of the configured `repo`.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  branch: 'master',\n  repo: 'https://example.com/other/repo.git'\n}, callback);\n```\n\n\n#### <a id=\"optionsremote\">options.remote</a>\n * type: `string`\n * default: `'origin'`\n\nThe name of the remote you'll be pushing to.  The default is your `'origin'` remote, but this can be configured to push to any remote.\n\nExample use of the `remote` option:\n\n```js\n/**\n * This task pushes to the `gh-pages` branch of of your `upstream` remote.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  remote: 'upstream'\n}, callback);\n```\n\n\n#### <a id=\"optionstag\">options.tag</a>\n * type: `string`\n * default: `''`\n\nCreate a tag after committing changes on the target branch.  By default, no tag is created.  To create a tag, provide the tag name as the option value.\n\n\n#### <a id=\"optionsmessage\">options.message</a>\n * type: `string`\n * default: `'Updates'`\n\nThe commit message for all commits.\n\nExample use of the `message` option:\n\n```js\n/**\n * This adds commits with a custom message.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  message: 'Auto-generated commit'\n}, callback);\n```\n\n\n#### <a id=\"optionsuser\">options.user</a>\n * type: `Object`\n * default: `null`\n\nIf you are running the `gh-pages` task in a repository without a `user.name` or `user.email` git config properties (or on a machine without these global config properties), you must provide user info before git allows you to commit.  The `options.user` object accepts `name` and `email` string values to identify the committer.\n\nExample use of the `user` option:\n\n```js\nghpages.publish(path.join(__dirname, 'build'), {\n  user: {\n    name: 'Joe Code',\n    email: 'coder@example.com'\n  }\n}, callback);\n```\n\n\n#### <a id=\"optionsclone\">options.clone</a>\n * type: `string`\n * default: temporary directory inside the `gh-pages` directory\n\nPath to a directory where your repository will be cloned.  If this directory doesn't already exist, it will be created.  If it already exists, it is assumed to be a clone of your repository.\n\nExample use of the `clone` option:\n\n```js\n/**\n * If you already have a temp directory, and want the repository cloned there,\n * use the `clone` option as below.  To avoid re-cloning every time the task is\n * run, this should be a directory that sticks around for a while.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  clone: 'path/to/tmp/dir'\n}, callback);\n```\n\n\n#### <a id=\"optionspush\">options.push</a>\n * type: `boolean`\n * default: `true`\n\nPush branch to remote.  To commit only (with no push) set to `false`.\n\nExample use of the `push` option:\n\n```js\nghpages.publish(path.join(__dirname, 'build'), { push: false }, callback);\n```\n\n\n#### <a id=\"optionssilent\">options.silent</a>\n * type: `boolean`\n * default: `false`\n\nSuppress logging.  This option should be used if the repository URL or other information passed to git commands is sensitive and should not be logged.  With silent `true` log messages are suppressed and error messages are sanitized.\n\nExample use of the `silent` option:\n\n```js\n/**\n * This configuration will suppress logging and sanitize error messages.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  repo: 'https://' + process.env.GH_TOKEN + '@github.com/user/private-repo.git',\n  silent: true\n}, callback);\n```\n\n\n#### <a id=\"optionslogger\">options.logger</a>\n * type: `function(string)`\n * default: `function(){}`\n\nLogger function.  The default logging function is a no-op, allowing you to provide a custom logging implementation.\n\nExample use of the `logger` option:\n\n```js\n/**\n * This configuration will log to the console\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  logger: function(message) {\n    console.log(message);\n  }\n}, callback);\n```\n\n\n#### <a id=\"optionsgit\">options.git</a>\n * type: `string`\n * default: `'git'`\n\nYour `git` executable.\n\nExample use of the `git` option:\n\n```js\n/**\n * If `git` is not on your path, provide the path as shown below.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  git: '/path/to/git'\n}, callback);\n```\n\n#### <a id=\"optionsdest\">options.dest</a>\n * type: `string`\n * default: `'.'`\n\nThe destination folder within the destination branch/repository.\n\nExample use of the `dest` option:\n\n```js\n/**\n * Place content in the static/project subdirectory of the target\n * branch/repository. If removing files, only remove static/project.\n */\nghpages.publish(path.join(__dirname, 'build'), {\n  dest: 'static/project'\n}, callback);\n```\n\n#### <a id=\"optionsdest\">options.branchnameAsDest</a>\n * type: `boolean`\n * default: `false`\n\nUse the current branch name as the path to the destination folder within the destination branch/repository. This option overrides the `dest` option.\n\nExample use of the `dest` option:\n\n```js\nghpages.publish(path.join(__dirname, 'build'), { branchnameAsDest: true }, callback);\n```\n\n\n## Command Line Utility\n\nInstalling the package creates a `gh-pages` command line utility.  Run `gh-pages --help` to see a list of supported options.\n\nWith a local install of `gh-pages`, you can set up a package script with something like the following:\n\n```shell\n\"scripts\": {\n  \"deploy\": \"gh-pages -d dist\"\n}\n```\n\nAnd then to publish everything from your `dist` folder to your `gh-pages` branch, you'd run this:\n\n```shell\nnpm run deploy\n```\n\n## Dependencies\n\nNote that this plugin requires Git 1.7.6 or higher (because it uses the `--exit-code` option for `git ls-remote`).  If you'd like to see this working with earlier versions of Git, please [open an issue](https://github.com/tschaub/gh-pages/issues).\n\n[![Current Status](https://secure.travis-ci.org/tschaub/gh-pages.svg?branch=master)](https://travis-ci.org/tschaub/gh-pages)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/gh-pages.git"
  },
  "scripts": {
    "pretest": "eslint lib test bin/gh-pages",
    "test": "mocha --recursive test"
  },
  "version": "0.12.0"
}
